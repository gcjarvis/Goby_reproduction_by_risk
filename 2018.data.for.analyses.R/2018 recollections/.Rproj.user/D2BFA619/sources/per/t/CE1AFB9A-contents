##11/13/17

#clear workspace
rm(list=ls())

library(lme4)
#install.packages("lmerTest")
library(lmerTest)
#neg.binom
library(MASS)
library(ggplot2)
library(extrafont)
library(ggplot)

#bringing in dataset
gobydata<-read.csv("Data/egg_counts_raw_data_11_4_17.csv")
gobydata<-subset(gobydata, Day=="Day 1")

#make sure that all necessary variables are stored as factors
goby.den.survey$Trial<-as.factor(goby.den.survey$Trial)
goby.den.survey$Day<-as.factor(goby.den.survey$Day)
goby.den.survey$Position<-as.factor(goby.den.survey$Position)
goby.den.survey$Hours_after_deploy<-as.factor(goby.den.survey$Hours_after_deploy)
goby.den.survey$Days_after_deploy<-as.factor(goby.den.survey$Days_after_deploy)
#goby.den.survey$Proportion_pop<-as.integer(goby.den.survey$Days_after_deploy)


#now make ggplot tables
egg.fig<-(with(gobydata, aggregate((Total_Eggs), list(Treatment=Treatment), mean)))
#now apply the se function to the 4th column [,4]
egg.fig$se<-with(gobydata, aggregate((Total_Eggs), list(Treatment=Treatment), function(x) sd(x)/sqrt(length(x))))[,2]

egg.fig

egg.fig.1<-ddply(gobydata,c("Treatment"),summarise,mean=mean(Total_Eggs, na.rm=TRUE), SE=std.error(Total_Eggs, na.rm=TRUE))
egg.fig.1

#no grid, no caps on error bars, NARROWER BARS, NO LEGEND
egg.count<- ggplot(egg.fig, aes(x=Treatment, y=x, fill=Treatment)) +
  geom_bar(stat="identity", colour="black",position="dodge")+ 
  scale_x_discrete(limits=c("Low","Medium","High"))+
  theme_classic()  
egg.count + geom_linerange(aes(ymin=x-se, ymax=x+se), size=0.5,   
                      position=position_dodge(.9)) + theme(text = element_text(size = 14)) +
  labs(x="Risk Treatment", y="Proportion of fish observed Day 6")


#order of egg.count table is high, low, medium, so that's how you have to code the color order

##MASTER GGPLOT CODE USED FOR FIGURES --- this has all of the axes labels and colors as they should appear in the PPT
egg.count<- ggplot(egg.fig, aes(x=Treatment, y=x, fill=Treatment)) +
  geom_bar(stat="identity", colour= "black", width = 0.7, position="dodge")+ 
  scale_x_discrete(limits=c("Low","Medium","High"))+
  theme_classic() + theme(legend.position="none") + scale_fill_manual(values=c("#D55E00","#0072B2","#009E73")) + 
  theme(axis.text.x=element_text(size=25, colour="black"),axis.text.y=element_text(size=18, colour="black"), axis.title=element_text(size=25,face="bold")) +
  theme(axis.title.y = element_text(margin = margin(t = 0, r = 25, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 22, r = 0, b = 0, l = 0)), axis.text.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0))) +
  theme(axis.ticks.x = element_blank()) + scale_y_continuous(expand = c(0, 0))
egg.count + geom_linerange(aes(ymin=x-se, ymax=x+se), size=0.5,   
                           position=position_dodge(.9)) + theme(text = element_text(family="Arial")) +
  labs(x="Risk Treatment", y="Average # Eggs Produced per Reef")

#The default text for ggplot is Arial

#ggplot customization for egg count graph
#means and SE, colored by the same pallete I used earlier
#change font size, and make it the same font as in the rest of the slide (ariel)
#get rid of grid (done in another open tab)


#How to specify color palette by treatment




ggplot(df, aes(x=cond, y=yval, fill=cond)) + geom_bar(stat="identity") + 
  scale_fill_manual(values=c("#CC6666", "#9999CC", "#66CC99"))

##how to specify the font of the figure
[1] "TT Arial"

library(extrafont)
font_import()
loadfonts(device = "win")

#get the code name of the font that you want
names(wf[wf=="TT Times New Roman"])
[1] "serif"

#I want to use Arial

$Arial
[1] "Arial"


##line graph for visual surveys

goby.den.survey<-read.csv("Data/density_surveys_11_13_17_R..csv")

#make sure that all necessary variables are stored as factors
goby.den.survey$Trial<-as.factor(goby.den.survey$Trial)
goby.den.survey$Day<-as.factor(goby.den.survey$Day)
goby.den.survey$Position<-as.factor(goby.den.survey$Position)
goby.den.survey$Hours_after_deploy<-as.factor(goby.den.survey$Hours_after_deploy)
goby.den.survey$Days_after_deploy<-as.factor(goby.den.survey$Days_after_deploy)
#goby.den.survey$Proportion_pop<-as.integer(goby.den.survey$Days_after_deploy)


viz.sur<-with(goby.den.survey, aggregate((Proportion_pop), list(Days_after_deploy=Days_after_deploy,Treatment=Treatment), mean))
#now apply the se function to the 4th column [,3]
viz.sur$se<-with(goby.den.survey, aggregate((Proportion_pop), list(Days_after_deploy=Days_after_deploy,Treatment=Treatment), function(x) sd(x)/sqrt(length(x))))[,3]
viz.sur

library(ggplot2)

p <- ggplot(viz.sur, aes(x=Days_after_deploy, y=x, group=Treatment, color=Treatment))+ 
  geom_errorbar(aes(ymin=x-se, ymax=x+se), width=.1, 
                position=position_dodge(0.05)) +
  geom_line(aes(linetype=Treatment)) + 
  geom_point(aes(shape=Treatment))+
  labs(x="Days After Deployment", y = "Porportion of Population Observed")+
  theme_classic()
p + theme_classic() + scale_color_manual(values=c("#D55E00","#0072B2","#009E73"))

p <- ggplot(viz.sur, aes(x=dose, y=len, group = supp, color=supp))+ 
  geom_errorbar(aes(ymin=len-sd, ymax=len+sd), width=.1, 
                position=position_dodge(0.05)) +
  geom_line(aes(linetype=supp)) + 
  geom_point(aes(shape=supp))+
  labs(title="Plot of lengthby dose",x="Dose (mg)", y = "Length")+
  theme_classic()
p + theme_classic() + scale_color_manual(values=c('#999999','#E69F00'))

## recollections column graph

egg.pop<-(with(goby.grav.prop, aggregate((Proportion_all_recollected), list(Treatment=Treatment), mean)))
#now apply the se function to the 4th column [,4]
egg.pop$se<-with(goby.grav.prop, aggregate((Proportion_all_recollected), list(Treatment=Treatment), function(x) sd(x)/sqrt(length(x))))[,2]
egg.pop

library(ggplot2)
egg.count<- ggplot(egg.pop, aes(x=Treatment, y=x, fill=Treatment)) +
  geom_bar(stat="identity", colour= "black", width = 0.7, position="dodge")+ 
  scale_x_discrete(limits=c("Low","Medium","High"))+
  theme_classic() + theme(legend.position="none") + scale_fill_manual(values=c("#D55E00","#0072B2","#009E73")) + 
  theme(axis.text.x=element_text(size=20, colour="black"),axis.text.y=element_text(size=16, colour="black"), axis.title=element_text(size=22,face="bold")) +
  theme(axis.title.y = element_text(size= 22, margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)), axis.text.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0))) +
  theme(axis.ticks.x = element_blank()) + scale_y_continuous(expand = c(0, 0))
egg.count + geom_linerange(aes(ymin=x-se, ymax=x+se), size=0.5,   
                           position=position_dodge(.9)) + theme(text = element_text(family="Arial")) +
  labs(x="Risk Treatment", y="Proportion Recollected")

##line plot for visual surveys

viz.sur<-with(goby.den.survey, aggregate((Proportion_pop), list(Days_after_deploy=Days_after_deploy,Treatment=Treatment), mean))
#now apply the se function to the 4th column [,3]
viz.sur$se<-with(goby.den.survey, aggregate((Proportion_pop), list(Days_after_deploy=Days_after_deploy,Treatment=Treatment), function(x) sd(x)/sqrt(length(x))))[,3]
viz.sur

library(ggplot2)
##Note: ggplot will plot whatever code is listed last. I had "p + theme_classic + scale_color_manual..." as my last string of code
#so it ignored all of the theme code for font and label placements previously. GGPLOT!

p <- ggplot(viz.sur, aes(x=Days_after_deploy, y=x, group=Treatment, color=Treatment))+ 
  geom_linerange(aes(ymin=x-se, ymax=x+se), 
                 position=position_dodge(0)) +
  geom_line(size=0.75)+
  geom_line(aes(linetype=Treatment)) +
  geom_point(aes(shape=Treatment))+
  labs(x="Days After Deployment", y = "Porportion Observed")+
  theme_classic() + 
  theme(axis.text.x=element_text(size=20, colour="black"),axis.text.y=element_text(size=16, colour="black"), axis.title=element_text(size=22,face="bold")) +
  theme(axis.title.y = element_text(size= 22, margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)), axis.text.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0))) +
  theme(axis.ticks.x = element_blank()) + scale_y_continuous(expand = c(0, 0)) +
  theme(text = element_text(family="Arial"))
p + scale_color_manual(values=c("#D55E00","#0072B2","#009E73")) + theme(legend.text=element_text(size=15)) + theme(legend.title =element_text(size=15, face="bold"))
  

p <- ggplot(viz.sur, aes(x=Days_after_deploy, y=x, group=Treatment, color=Treatment))+ 
  geom_linerange(aes(ymin=x-se, ymax=x+se), 
                 position=position_dodge(0)) +
  geom_line(size=0.75)+
  geom_line(aes(linetype=Treatment)) +
  geom_point(aes(shape=Treatment))+
  labs(x="Days After Deployment", y = "Porportion Observed")+
  theme_classic() + 
  theme(axis.text.x=element_text(size=20, colour="black"),axis.text.y=element_text(size=16, colour="black"), axis.title=element_text(size=22,face="bold")) +
  theme(axis.title.y = element_text(size= 22, margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)), axis.text.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0))) +
  theme(axis.ticks.x = element_blank()) + scale_y_continuous(expand = c(0, 0)) +
  theme(text = element_text(family="Arial"))
p + scale_color_manual(values=c("#0072B2","#009E73","#D55E00")) + #theme(legend.text=element_text(size=15)) + theme(legend.title =element_text(size=15, face="bold"))
  theme(legend.position="none")

print(p)
ggsave("/tmp/plt.png", width = 16, height = 9, dpi = 120)

#going to see if I can reorder the treatments and force it into ggplot

levels(viz.sur$Treatment)
viz.sur$Treatment <- factor(viz.sur$Treatment, levels = c("Low","Medium","High"))

viz.sur$Treatment <- factor(viz.sur$Treatment, levels=c("Low", "Medium", "High"), labels=c("Low", "Medium", "High"))

##going to spend 5 minutes trying to smooth out the graph

library(zoo)
library(reshape)
viz.sur$smooth<-rollmean(viz.sur$x,3,fill="extend") # 2nd parameter defines smoothness 
ggplot(viz.sur, aes(x=Days_after_deploy,y=x,group=Treatment), melt(viz.sur))+geom_line()
  

library(zoo)
library(reshape)
a$smooth<-rollmean(a$values,3,fill="extend") # 2nd parameter defines smoothness 
ggplot(melt(a),aes(x=year,y=value,color=variable,group=variable))+geom_line()
