setwd("C:/Users/George/Desktop/2018 summer/2018 Goby/2018 data for analyses, R/2018 length to biomass")
#load packages
library(sciplot)
library(lme4)
library(lmerTest)
library(car)
getwd()
length.biomass<-read.csv("Data/natural ratio.csv")
length.biomass<-complete.cases(length.biomass)
length.biomass.1<-complete.cases(length.biomass)
length.biomass<-read.csv("Data/natural ratio.csv")#603 rows of data
length.biomass<- final[complete.cases(length.biomass), ]
length.biomass<- length.biomass[complete.cases(length.biomass), ]
length.biomass<-read.csv("Data/natural ratio.csv")#603 rows of data
length.biomass<- length.biomass[complete.cases(length.biomass), ]
head(length.biomass)
plot(length.biomass$Size, length.biomass$Weight)
lb.mod<-lm(Weight~Length, data=length.biomass)
lb.mod<-lm(Weight~Size, data=length.biomass)
anova(lb.mod)
summary(lb.mod)
length.biomass<-read.csv("Data/10.28.18.length to biomass.csv")
length.biomass<-length.biomass- [,3]
length.biomass<-length.biomass - ([,3])
length.biomass<-length.biomass[,-3]
head(length.biomass)
lb.mod<-lm(weight~size, data=length.biomass)
summary(lb.mod)
plot(lb.mod)
plot(weight, size, data=length.biomass)
head(length.biomass)
plot(size, weight, data=length.biomass)
plot(x=size, y=weight, data=length.biomass)
plot(weight~size, data=length.biomass)
LBplot<-plot(weight~size, data=length.biomass)
abline(LBplot)
abline(lb.mod, col="red")
lines(lowess(weight,size), col="blue") # lowess line (x,y)
lines(lowess(lb.mod), col="blue") # lowess line (x,y)
lines(lowess(LBplot), col="blue") # lowess line (x,y)
m <- nls(weight ~ I(size^power), data = length.biomass, start = list(power = 1),
+ trace = T)
m <- nls(y ~ I(x^power), data = ds, start = list(power = 1),
+ trace = T)
m <- nls(weight ~ I(size^power), data = length.biomass, start = list(power = 1))
m
m <- nls(weight ~ I(size^power), data = length.biomass, start = list(power = 1), trace = T)
summary(m)
#my data:
plot(weight ~ size, main = "Known cubic, with noise", data=length.biomass)
s <- seq(0, 1, length = 100)
lines(s, s^3, lty = 2, col = "green")
plot(weight ~ size, main = "Known cubic, with noise", data=length.biomass)
s <- seq(0, 1, length = 100)
lines(s, s^3, lty = 2, col = "green")
lines(s, s^3, lty = 1, col = "green")
s <- seq(0, 1, length = 1000)
lines(s, s^3, lty = 1, col = "green")
#my data:
plot(weight ~ size, main = "Known cubic, with noise", data=length.biomass)
s <- seq(0, 1, length = 1000)
lines(s, s^3, lty = 1, col = "green")
#my data:
plot(weight ~ size, main = "Known cubic, with noise", data=length.biomass)
s <- seq(0, 1, length = 1000)
lines(s, s^3, lty = 2, col = "green")
#my data:
plot(weight ~ size, main = "Known cubic, with noise", data=length.biomass)
s <- seq(0, 40, length = 100)
lines(s, s^3, lty = 2, col = "green")
s <- seq(0, 40, length = 500)
lines(s, s^3, lty = 2, col = "green")
lines(s, s^3, lty = 2, col = "red")
lines(s, s^3, lty = 1, col = "red")
#my data:
plot(weight ~ size, main = "Known cubic, with noise", data=length.biomass)
s <- seq(0, 40, length = 1000)
lines(s, s^3, lty = 1, col = "red")
#my code:
nls(weight~b*size^z,start = list(b = 0, z = 1),data=length.biomass)
#Import the data.
#We'll use our old friend, the SnailData as an example
mydata <- read.csv("Data/lb.1.14.19.csv")
View(mydata)
#Import the data.
#We'll use our old friend, the SnailData as an example
mydata <- read.csv("Data/lb.1.14.19.csv")
View(mydata)
model1<-lm(Weight~Length, data=mydata, na.action="na.omit")
#Before we look at the results, let's test the assumptions of the model
#We can call the residuals of the model as:
resid(model1) #better to name these as something
model1res<-resid(model1)
#Now we can test the normality of the residuals
library(car)
qqp(model1res, "norm")
#We can also call the fitted y values as:
fitted(model1)
#To test for homogeneity of variance, we want to plot the fitted (predicted) values
#against the residuals
plot(model1res~fitted(model1))
#A shortcut to doing all of the above.
plot(model1) #gives plots that show normality, homogeneity of variance, and potential outliers
summary(model1)
#Ideally we would do this as a Model II regression, especially if we're interested in knowing
#the true estimate of the slope. Model II is appropriate because we have error in our measures
#of both x and y.
library(lmodel2)
model2<-lmodel2(Weight~Length, range.y="relative", range.x="relative", data=mydata, nperm=99)
model2
#how to make plot
#There are lots of options to add on here (see Using base Plot code)
#In the simplest form:
plot(Weight~Length, data=mydata, col="blue", ylab="Weight (mg)", xlab="Length (cm)")
abline(model1, col="blue") #adds fit from the model
#want to add confidence intervals to the regression line?
prd<-predict(model1, interval="confidence")
#the above gives a table with predicted values and upper and lower confidence intervals
lines(mydata$Length, prd[,2], lty=2) #adds lower CL
lines(mydata$Length, prd[,3], lty=2) #adds upper CL
#I didn't like these funky lines, which seems to be fixed by making
#a new x variable that is more finely grained. So try this
newx<-seq(min(mydata$Length), max(mydata$Length), 0.1)
newpredict<-predict(model1, newdata=data.frame(Length=newx), interval="confidence")
plot(Weight~Length, data=mydata, col="blue", ylab="Weight (mg)", xlab="Length (cm)")
abline(model1, col="blue")
lines(newx, newpredict[,2], lty=2)
lines(newx, newpredict[,3], lty=2)
#Or you could also do this with ggplot
#If you find that far too clunky, then use ggplot:
library(ggplot2)
ggplot(mydata, aes(x=Length, y=Weight))+
theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank()) +
geom_point(shape=1) +
guides(fill=FALSE) +
ylab("Weight (mg)") +
xlab("Length (cm)") +
geom_smooth(method="lm")
mydata$lnlength<-log(mydata$Length)
View(mydata)
mydata$lnweight<-log(mydata$Weight)
View(mydata)
model2<-lm(lnweight~lnlength, data=mydata,na.action="na.omit")
model2res<-resid(model2)
qqp(model2res, "norm")
fitted(model2)
plot(model2res~fitted(model2))
plot(model2)
summary(model2)
model3<-lm(lnweight~lnlength, data=mydata,na.action="na.omit")
model3res<-resid(model2)
qqp(model3res, "norm")
fitted(model3)
plot(model3res~fitted(model2))
plot(model3)
library(lmodel2)
model2a<-lmmodel2(lnweight~lnlength, range.y="relative", range.x="relative", data=mydata, nperm=99)
#Ideally we would do this as a Model II regression, especially if we're interested in knowing
#the true estimate of the slope. Model II is appropriate because we have error in our measures
#of both x and y.
library(lmodel2)
model2a<-lmodel2(lnweight~lnlength, range.y="relative", range.x="relative", data=mydata, nperm=99)
model2a<-lmodel2(lnweight~lnlength, range.y="interval", range.x="relative", data=mydata, nperm=99)
plot(lnweight~lnlength, data=mydata, col="blue", ylab="Log Weight (g)", xlab="Log Length (cm)")
abline(model3, col="blue") #adds fit from the model
#Note: "relative" means the variable has a true zero at some point
#"interval" means the variables can include negative values
model2a
plot(lnweight~lnlength, data=mydata, col="blue", ylab="Log Weight (g)", xlab="Log Length (cm)")
abline(model2a, col="blue") #adds fit from the model
abline(model2a, col="blue") #adds fit from the model
abline(model3, col="blue") #adds fit from the model
#the above gives a table with predicted values and upper and lower confidence intervals
lines(mydata$Length, prd[,3], lty=2) #adds lower CL
lines(mydata$Length, prd[,4], lty=2) #adds upper CL
View(mydata)
#the above gives a table with predicted values and upper and lower confidence intervals
lines(mydata$Length, prd[,2], lty=2) #adds lower CL
lines(mydata$Length, prd[,3], lty=2) #adds upper CL
prd<-predict(model3, interval="confidence")
#the above gives a table with predicted values and upper and lower confidence intervals
lines(mydata$Length, prd[,2], lty=2) #adds lower CL
prd<-predict(model3, interval="confidence")
#the above gives a table with predicted values and upper and lower confidence intervals
lines(mydata$lnlength, prd[,2], lty=2) #adds lower CL
lines(mydata$lnlength, prd[,3], lty=2) #adds upper CL
newx<-seq(min(mydata$lnlength), max(mydata$lnlength), 0.1)
newpredict<-predict(model3, newdata=data.frame(Length=newx), interval="confidence")
newx<-seq(min(mydata$lnlength), max(mydata$lnlength), 0.1)
newpredict<-predict(model3, newdata=data.frame(lnlength=newx), interval="confidence")
plot(lnweight~lnlength, data=mydata, col="blue", ylab="Log Weight (g)", xlab="Log Length (mm)")
abline(model3, col="blue")
lines(newx, newpredict[,2], lty=2)
lines(newx, newpredict[,3], lty=2)
library(ggplot2)
ggplot(mydata, aes(x=lnlength, y=lnweight))+
theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank()) +
geom_point(shape=1) +
guides(fill=FALSE) +
ylab("Log Weight (g)") +
xlab("Log Length (mm)") +
geom_smooth(method="lm")
lm_eqn <- function(df){
m <- lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
p<-ggplot(mydata, aes(x=lnlength, y=lnweight))+
theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank()) +
geom_point(shape=1) +
guides(fill=FALSE) +
ylab("Log Weight (g)") +
xlab("Log Length (mm)") +
geom_smooth(method="lm")
p1 <- p + geom_text(x = 2.5, y = 0, label = lm_eqn(df), parse = TRUE)
p + geom_text(x = 2.5, y = 0, label = lm_eqn(df), parse = TRUE)
p + geom_text(x = 2.5, y = 0, label = lm_eqn(df))
#Import the data.
#We'll use our old friend, the SnailData as an example
mydata<-read.csv("Data/SnailData (1).csv")
model1<-lm(Weight~Length, data=mydata, na.action="na.omit")
model2<-lmodel2(Weight~Length, range.y="relative", range.x="relative", data=mydata, nperm=99)
model2
mydata <- read.csv("Data/lb.1.14.19.csv")
mydata$lnlength<-log(mydata$Length)
mydata$lnweight<-log(mydata$Weight)
mydata$test.weight<-2.875048*(mydata$lnlength)-10.52898
View(mydata)
#now want to see if I can take the anitlog to backcalculate the weight values
mydata$antilog.weight<-10^(mydata$test.weight)
View(mydata)
